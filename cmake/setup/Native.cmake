include_guard(GLOBAL)

set(OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIRECTORY}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIRECTORY}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIRECTORY}/bin)

set(CMAKE_UNITY_BUILD ON)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_EXTENSIONS ON)
set(CMAKE_C_STANDARD_REQUIRED ON)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(BUILD_SHARED_LIBS ON)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
set(CMAKE_RC_CREATE_SHARED_LIBRARY ON)

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    if (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
#        set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} -Wc++98-compat)
#        set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -Wc++98-compat)
    elseif (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} -Wno-c++98-compat)
        set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -Wno-c++98-compat)
    endif ()
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
#    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} -Wno-c++-compat)
#    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -Wno-c++98-compat)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
endif ()

